--- ../src-base/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
+++ ../src-work/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
@@ -1,5 +1,7 @@
 package net.minecraft.world.gen;
 
+import co.aikar.timings.Timing;
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
@@ -26,16 +28,17 @@
 import net.minecraft.world.chunk.storage.IChunkLoader;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.world.ChunkUnloadEvent;
 
 public class ChunkProviderServer implements IChunkProvider
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    private final Set<Long> droppedChunksSet = Sets.<Long>newHashSet();
+    public final Set<Long> droppedChunksSet = Sets.<Long>newHashSet();
     public final IChunkGenerator chunkGenerator;
     public final IChunkLoader chunkLoader;
     public final Long2ObjectMap<Chunk> id2ChunkMap = new Long2ObjectOpenHashMap<Chunk>(8192);
     public final WorldServer world;
-    private final Set<Long> loadingChunks = com.google.common.collect.Sets.newHashSet();
+    private final Set<Long> loadingChunks = Sets.newHashSet();
 
     public ChunkProviderServer(WorldServer worldObjIn, IChunkLoader chunkLoaderIn, IChunkGenerator chunkGeneratorIn)
     {
@@ -83,6 +86,10 @@
         return chunk;
     }
 
+    public Chunk getChunkIfLoaded(int x, int z) {
+        return id2ChunkMap.get(ChunkPos.asLong(x, z));
+    }
+
     @Nullable
     public Chunk loadChunk(int x, int z)
     {
@@ -92,6 +99,11 @@
     @Nullable
     public Chunk loadChunk(int x, int z, @Nullable Runnable runnable)
     {
+        return getChunkAt(x, z, runnable, true);
+    }
+
+    public Chunk getChunkAt(int x, int z, Runnable runnable, boolean generate)
+    {
         Chunk chunk = this.getLoadedChunk(x, z);
         if (chunk == null)
         {
@@ -106,7 +118,7 @@
                 {
                 this.id2ChunkMap.put(ChunkPos.asLong(x, z), chunk);
                 chunk.onLoad();
-                chunk.populate(this, this.chunkGenerator);
+                chunk.populateCB(this, this.chunkGenerator, false);
                 }
 
                 loadingChunks.remove(pos);
@@ -123,6 +135,8 @@
                     return null;
                 }
             }
+        } else if (chunk == null && generate) {
+            chunk = provideChunk(x, z);
         }
 
         // If we didn't load the chunk async and have a callback run it now
@@ -154,7 +168,7 @@
 
             this.id2ChunkMap.put(i, chunk);
             chunk.onLoad();
-            chunk.populate(this, this.chunkGenerator);
+            chunk.populateCB(this, this.chunkGenerator, true);
         }
 
         return chunk;
@@ -177,7 +191,11 @@
         }
         catch (Exception exception)
         {
-            LOGGER.error("Couldn't load chunk", (Throwable)exception);
+            // Paper start
+            String msg = "Couldn\'t load chunk";
+            ChunkProviderServer.LOGGER.error(msg, exception);
+            ServerInternalException.reportInternalException(exception);
+            // Paper end
             return null;
         }
     }
@@ -190,24 +208,33 @@
         }
         catch (Exception exception)
         {
-            LOGGER.error("Couldn't save entities", (Throwable)exception);
+            // Paper start
+            String msg = "Couldn\'t save entities";
+            ChunkProviderServer.LOGGER.error(msg, exception);
+            ServerInternalException.reportInternalException(exception);
+            // Paper end
         }
     }
 
     private void saveChunkData(Chunk chunkIn)
     {
-        try
+        try (Timing timed = world.timings.chunkSaveData.startTiming())
         {
             chunkIn.setLastSaveTime(this.world.getTotalWorldTime());
             this.chunkLoader.saveChunk(this.world, chunkIn);
         }
         catch (IOException ioexception)
         {
-            LOGGER.error("Couldn't save chunk", (Throwable)ioexception);
+            // Paper start
+            String msg = "Couldn\'t save chunk";
+            ChunkProviderServer.LOGGER.error(msg, ioexception);
+            ServerInternalException.reportInternalException(ioexception);
         }
         catch (MinecraftException minecraftexception)
         {
-            LOGGER.error("Couldn't save chunk; already in use by another instance of Minecraft?", (Throwable)minecraftexception);
+            String msg = "Couldn\'t save chunk; already in use by another instance of Minecraft?";
+            ChunkProviderServer.LOGGER.error(msg, minecraftexception);
+            ServerInternalException.reportInternalException(minecraftexception);
         }
     }
 
@@ -266,17 +293,21 @@
 
                     if (chunk != null && chunk.unloadQueued)
                     {
-                        chunk.onUnload();
-                        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.asLong(chunk.x, chunk.z), chunk);
-                        this.saveChunkData(chunk);
-                        this.saveChunkExtraData(chunk);
-                        this.id2ChunkMap.remove(olong);
+//                        chunk.onUnload();
+//                        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.asLong(chunk.x, chunk.z), chunk);
+//                        this.saveChunkData(chunk);
+//                        this.saveChunkExtraData(chunk);
+//                        this.id2ChunkMap.remove(olong);
+                        if (!unloadChunk(chunk, true)) {
+                            continue;
+                        }
                         ++i;
                     }
                 }
             }
 
-            if (this.id2ChunkMap.isEmpty()) net.minecraftforge.common.DimensionManager.unloadWorld(this.world.provider.getDimension());
+            // Magma - Stops forge automatically unloading world on startup.
+//            if (this.id2ChunkMap.isEmpty()) net.minecraftforge.common.DimensionManager.unloadWorld(this.world.provider.getDimension());
 
             this.chunkLoader.chunkTick();
         }
@@ -284,6 +315,40 @@
         return false;
     }
 
+    // CraftBukkit start
+    public boolean unloadChunk(Chunk chunk, boolean save) {
+        ChunkUnloadEvent event = new ChunkUnloadEvent(chunk.bukkitChunk, save);
+        this.world.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return false;
+        }
+        save = event.isSaveChunk();
+        chunk.lightingQueue.processUnload(); // Paper
+
+        // Update neighbor counts
+        for (int x = -2; x < 3; x++) {
+            for (int z = -2; z < 3; z++) {
+                if (x == 0 && z == 0) {
+                    continue;
+                }
+
+                Chunk neighbor = this.getChunkIfLoaded(chunk.x + x, chunk.z + z);
+                if (neighbor != null) {
+                    neighbor.setNeighborUnloaded(-x, -z);
+                    chunk.setNeighborUnloaded(x, z);
+                }
+            }
+        }
+        // Moved from unloadChunks above
+        chunk.onUnload();
+        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.asLong(chunk.x, chunk.z), chunk);
+        this.saveChunkData(chunk);
+        this.saveChunkExtraData(chunk);
+        this.id2ChunkMap.remove(chunk.chunkKey);
+        return true;
+    }
+    // CraftBukkit end
+
     public boolean canSave()
     {
         return !this.world.disableLevelSaving;
@@ -324,4 +389,5 @@
     {
         return this.id2ChunkMap.containsKey(ChunkPos.asLong(x, z)) || this.chunkLoader.isChunkGeneratedAt(x, z);
     }
+
 }
