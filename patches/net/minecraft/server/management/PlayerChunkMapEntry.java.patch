--- ../src-base/minecraft/net/minecraft/server/management/PlayerChunkMapEntry.java
+++ ../src-work/minecraft/net/minecraft/server/management/PlayerChunkMapEntry.java
@@ -23,11 +23,11 @@
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final PlayerChunkMap playerChunkMap;
-    private final List<EntityPlayerMP> players = Lists.<EntityPlayerMP>newArrayList();
+    public final List<EntityPlayerMP> players = Lists.<EntityPlayerMP>newArrayList();
     private final ChunkPos pos;
     private short[] changedBlocks = new short[64];
     @Nullable
-    private Chunk chunk;
+    public Chunk chunk;
     private int changes;
     private int changedSectionFilter;
     private long lastUpdateInhabitedTime;
@@ -36,17 +36,26 @@
     {
         public void run()
         {
-            PlayerChunkMapEntry.this.chunk = PlayerChunkMapEntry.this.playerChunkMap.getWorldServer().getChunkProvider().loadChunk(PlayerChunkMapEntry.this.pos.x, PlayerChunkMapEntry.this.pos.z);
             PlayerChunkMapEntry.this.loading = false;
+            PlayerChunkMapEntry.this.chunk = PlayerChunkMapEntry.this.playerChunkMap.getWorldServer().getChunkProvider().loadChunk(PlayerChunkMapEntry.this.pos.x, PlayerChunkMapEntry.this.pos.z);
+            markChunkUsed(); // Paper - delay chunk unloads
         }
     };
     private boolean loading = true;
+    // Paper start - delay chunk unloads
+    public final void markChunkUsed() {
+        if (chunk != null && chunk.scheduledForUnload != null) {
+            chunk.scheduledForUnload = null;
+        }
+    }
+    // Paper end
 
     public PlayerChunkMapEntry(PlayerChunkMap mapIn, int chunkX, int chunkZ)
     {
         this.playerChunkMap = mapIn;
         this.pos = new ChunkPos(chunkX, chunkZ);
         mapIn.getWorldServer().getChunkProvider().loadChunk(chunkX, chunkZ, this.loadedRunnable);
+        markChunkUsed(); // Paper - delay chunk unloads
     }
 
     public ChunkPos getPos()
